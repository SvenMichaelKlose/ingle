SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
}

MEMORY {
    ZP:       file = "", start = $0000, size = $0090, define = yes;
    LOADADDR: start = $11FF, size = $0002;
    HEADER:   start = $1201, size = $000C;
    SCREEN:   start = $120d, size = $0df3, fill = yes,  fillval = $ea;
    MAIN:     start = $2000, size = $4000, define = yes;
    APP:      start = $4000, size = $2000, define = yes;
    RAM123:   start = $0400, size = $0c00;
    IO23:     start = $9800, size = $9ff0;
    ULTIMEM:  start = $9ff0, size = $0010;
}

SEGMENTS {
    ZEROPAGE:    load = ZP,       type = zp;
    LOADADDR:    load = LOADADDR, type = ro;
    EXEHDR:      load = HEADER,   type = ro;
    STARTUP:     load = MAIN,     type = ro;
    LOWCODE:     load = MAIN,     type = ro,  optional = yes;
    ONCE:        load = MAIN,     type = ro,  optional = yes;
    CODE:        load = MAIN,     type = ro;
    LIB:         load = MAIN,     type = rw;
    KERNEL:      load = MAIN,     type = ro;
    MACHDEP:     load = MAIN,     type = ro;
    KERNELDATA:  load = MAIN,     type = ro;
    MACHDEPDATA: load = MAIN,     type = ro;
    RODATA:      load = MAIN,     type = ro;
    DATA:        load = MAIN,     type = rw;
    GLOBALBSS:   load = MAIN,     type = rw, define = yes;
    LOCALCODE:   load = MAIN,     type = rw, run = IO23, define = yes, optional = no;
    BOOT:        load = MAIN,     type = rw, run = APP, define = yes;
    INIT:        load = MAIN,     type = bss;
    BSS:         load = MAIN,     type = bss, define = yes;
    LOCALBSS:    load = IO23,     type = bss, define = yes, optional = no;
    LOCALBSS2:   load = RAM123,   type = bss, define = yes, optional = no;
    ULTIMEM:     load = ULTIMEM,  type = bss, define = yes, optional = no;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
