SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
}

MEMORY {
    ZP:       file = "", start = $0000, size = $0090, define = yes;
    LOADADDR: start = $11FF, size = $0002;
    HEADER:   start = $1201, size = $000C;
    SCREEN:   start = $120d, size = $0df3, fill = yes,  fillval = $ea;
    MAIN:     start = $2000, size = $6000 - __STACKSIZE__, define = yes;
    RAM123:   file = "", start = $0400, size = $0c00;
    IO23:     file = "", start = $9800, size = $9ff0;
}

SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    ONCE:     load = MAIN,     type = ro,  optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = bss;
    BSS:      load = MAIN,     type = bss, define = yes;
    PROC:     load = MAIN,     type = rw, run = IO23, define = yes, optional = no;
    GLOBAL:   load = RAM123,   type = bss, run = RAM123;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
