SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800;
}

MEMORY {
    # Keep in sync with 'stack_size' in wedge-secondary.c.
    ZP:         file = "", define = yes, start = $0002, size = $0028;
    LOADADDR:   file = %O,               start = $11FF, size = $0002;
    HEADER:     file = %O,               start = $1201, size = $000C;
    SCREEN:     file = %O, define = yes, start = $120d, size = $0df0, fill = yes,  fillval = $ea;
    MAIN:       file = %O, define = yes, start = $1ffd, size = $5ffd - __STACKSIZE__;
}

SEGMENTS {
    ZEROPAGE:   load = ZP,       type = zp;
    LOADADDR:   load = LOADADDR, type = ro;
    EXEHDR:     load = HEADER,   type = ro;
    SECONDARY:  load = MAIN,     type = ro;
    STARTUP:    load = MAIN,     type = ro;
    LOWCODE:    load = MAIN,     type = ro, optional = yes;
    ONCE:       load = MAIN,     type = ro, optional = yes;
    CODE:       load = MAIN,     type = ro;
    ULTIFS:     load = MAIN,     type = ro;
    IO:         load = MAIN,     type = ro, define = yes;
    RODATA:     load = MAIN,     type = ro;
    DATA:       load = MAIN,     type = rw;
    INIT:       load = MAIN,     type = bss;
    BSS:        load = MAIN,     type = bss, define = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
